.cpu cortex-m3
	.arch armv7-m
	.fpu softvfp
	.eabi_attribute 20, 1
	.eabi_attribute 21, 1
	.eabi_attribute 23, 3
	.eabi_attribute 24, 1
	.eabi_attribute 25, 1
	.eabi_attribute 26, 1
	.eabi_attribute 30, 6
	.eabi_attribute 34, 1
	.eabi_attribute 18, 4
	.file	"main.c"
    .data
    message:
        .space 20 @Reserva espacio en la seccion de datos globales. 20 bytes
	out:
		.space 20
	.text
	.align	1
	.global	main
	.syntax unified
	.thumb
	.thumb_func
	.type	main, %function

imprimir:
	@prologo
	push {r7}
	sub sp, sp, #12	@¿Como se cuanto tengo que reservar?
	add r7, sp, #0

	@Argumentos de la funcion que provienen de main (r0, r1)
	str r0, [r7] 		@Direccion base del buffer
	str r1, [r7, #4] 	@Tamaño del buffer

	@imprimir en consola
	ldr r0, =1			@indica que se imprimira en la salida estandar
	ldr r1, [r7]		@Direccion base del buffer
    ldr r2, [r7, #4]	@Tamaño del buferr
	mov r7, #4			@"Write"
    svc 0x0
	mov r3, r0			@Por convencion se respalda en r3, lo que tiene r0
	add r7, sp, #0

	@epilogo
	mov r0, r3
	adds r7, r7, #12
	mov sp, r7
	pop {r7}
	bx lr

leer:
	@prologo
	push {r7}
	sub sp, sp, #8		@¿Como se cuanto tengo que reservar?  8 por el respaldo de r0 y r1
	add r7, sp, #0

	@Argumentos de la funcion que provienen de main (r0, r1)
	str r0, [r7] 		@Direccion base del buffer
	str r1, [r7, #4] 	@Tamaño del buffer

	ldr r0, =0			@Indica que se leerá desde la entrada estándar.
	ldr r1, [r7]		@Asignación de la dirección del buffer.
	ldr r2, [r7, #4]	@Asignación del tamaño del buffer
	mov r7, #3			@Indica la salida estadar "read"
	svc #0				@El valor de retorno se guarda en r0
	mov r3, r0			@Por convencion se respalda en r3, lo que tiene r0
	add r7, sp, #0

	@epilogo
	mov r0, r3
	adds r7, r7, #8
	mov sp, r7
	pop {r7}
	bx lr
	
@Argumentos: valor a converitr
Ascii_Entero:
	push	{r7}
	sub	sp, sp, #28
	add	r7, sp, #0
	str	r0, [r7, #4]
	str	r1, [r7]
	movs	r3, #0
	str	r3, [r7, #12]
	movs	r3, #0
	str	r3, [r7, #16]
	movs	r3, #1
	str	r3, [r7, #20]
	ldr	r3, [r7, #16]
	ldr	r2, [r7, #4]
	add	r3, r3, r2
	ldrb	r3, [r3]	@ zero_extendqisi2
	cmp	r3, #45
	bne	.L3
	mov	r3, #-1
	str	r3, [r7, #20]
	ldr	r3, [r7, #16]
	adds	r3, r3, #1
	str	r3, [r7, #16]
	b	.L3
.L5:
	ldr	r3, [r7, #16]
	ldr	r2, [r7, #4]
	add	r3, r3, r2
	ldrb	r3, [r3]	@ zero_extendqisi2
	cmp	r3, #47
	bls	.L4
	ldr	r3, [r7, #16]
	ldr	r2, [r7, #4]
	add	r3, r3, r2
	ldrb	r3, [r3]	@ zero_extendqisi2
	cmp	r3, #57
	bhi	.L4
	ldr	r2, [r7, #12]
	mov	r3, r2
	lsls	r3, r3, #2
	add	r3, r3, r2
	lsls	r3, r3, #1
	mov	r1, r3
	ldr	r3, [r7, #16]
	ldr	r2, [r7, #4]
	add	r3, r3, r2
	ldrb	r3, [r3]	@ zero_extendqisi2
	subs	r3, r3, #48
	add	r3, r3, r1
	str	r3, [r7, #12]
.L4:
	ldr	r3, [r7, #16]
	adds	r3, r3, #1
	str	r3, [r7, #16]
.L3:
	ldr	r3, [r7, #16]
	ldr	r2, [r7, #4]
	add	r3, r3, r2
	ldrb	r3, [r3]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L5
	ldr	r3, [r7, #12]
	ldr	r2, [r7, #20]
	mul	r2, r3, r2
	ldr	r3, [r7]
	str	r2, [r3]
	nop
	adds	r7, r7, #28
	mov	sp, r7
	@ sp needed
	pop	{r7}
	bx	lr
	
suma_arreglo:
	push	{r7}
	sub	sp, sp, #20
	add	r7, sp, #0
	str	r0, [r7, #4]
	str	r1, [r7]
	movs	r3, #0
	str	r3, [r7, #12]
	movs	r3, #0
	str	r3, [r7, #8]
	b	L2
L3:
	ldr	r3, [r7, #8]
	lsls	r3, r3, #2
	ldr	r2, [r7, #4]
	add	r3, r3, r2
	ldr	r3, [r3]
	ldr	r2, [r7, #12]
	add	r3, r3, r2
	str	r3, [r7, #12]
	ldr	r3, [r7, #8]
	adds	r3, r3, #1
	str	r3, [r7, #8]
L2:
	ldr	r2, [r7, #8]
	ldr	r3, [r7]
	cmp	r2, r3
	blt	L3
	ldr	r3, [r7, #12]
	mov	r0, r3
	adds	r7, r7, #20
	mov	sp, r7
	@ sp needed
	pop	{r7}
	bx	lr

int_to_ascii:
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 1, uses_anonymous_args = 0
	@ link register save eliminated.
	push	{r7}
	sub	sp, sp, #36
	add	r7, sp, #0
	str	r0, [r7, #12]
	str	r1, [r7, #8]
	str	r2, [r7, #4]
	movs	r3, #0
	str	r3, [r7, #24]
	ldr	r3, [r7, #12]
	cmp	r3, #0
	bge	.L3i
	ldr	r3, [r7, #24]
	adds	r2, r3, #1
	str	r2, [r7, #24]
	mov	r2, r3
	ldr	r3, [r7, #8]
	add	r3, r3, r2
	movs	r2, #45
	strb	r2, [r3]
	ldr	r3, [r7, #12]
	rsbs	r3, r3, #0
	str	r3, [r7, #12]
	b	.L3i
.L5i:
	ldr	r2, [r7, #12]
	ldr	r3, =out
	smull	r1, r3, r3, r2
	asrs	r1, r3, #2
	asrs	r3, r2, #31
	subs	r1, r1, r3
	mov	r3, r1
	lsls	r3, r3, #2
	add	r3, r3, r1
	lsls	r3, r3, #1
	subs	r1, r2, r3
	uxtb	r2, r1
	ldr	r3, [r7, #24]
	adds	r1, r3, #1
	str	r1, [r7, #24]
	mov	r1, r3
	ldr	r3, [r7, #8]
	add	r3, r3, r1
	adds	r2, r2, #48
	uxtb	r2, r2
	strb	r2, [r3]
	ldr	r3, [r7, #12]
	ldr	r2, =out
	smull	r1, r2, r2, r3
	asrs	r2, r2, #2
	asrs	r3, r3, #31
	subs	r3, r2, r3
	str	r3, [r7, #12]
.L3i:
	ldr	r3, [r7, #12]
	cmp	r3, #0
	ble	.L4i
	ldr	r3, [r7, #4]
	subs	r3, r3, #1
	ldr	r2, [r7, #24]
	cmp	r2, r3
	blt	.L5i
.L4i:
	ldr	r3, [r7, #24]
	ldr	r2, [r7, #8]
	add	r3, r3, r2
	movs	r2, #0
	strb	r2, [r3]
	movs	r3, #0
	str	r3, [r7, #28]
	b	.L6i
.L7i:
	ldr	r3, [r7, #28]
	ldr	r2, [r7, #8]
	add	r3, r3, r2
	ldrb	r3, [r3]
	strb	r3, [r7, #23]
	ldr	r3, [r7, #24]
	subs	r2, r3, #1
	ldr	r3, [r7, #28]
	subs	r3, r2, r3
	mov	r2, r3
	ldr	r3, [r7, #8]
	add	r2, r2, r3
	ldr	r3, [r7, #28]
	ldr	r1, [r7, #8]
	add	r3, r3, r1
	ldrb	r2, [r2]	@ zero_extendqisi2
	strb	r2, [r3]
	ldr	r3, [r7, #24]
	subs	r2, r3, #1
	ldr	r3, [r7, #28]
	subs	r3, r2, r3
	mov	r2, r3
	ldr	r3, [r7, #8]
	add	r3, r3, r2
	ldrb	r2, [r7, #23]
	strb	r2, [r3]
	ldr	r3, [r7, #28]
	adds	r3, r3, #1
	str	r3, [r7, #28]
.L6i:
	ldr	r3, [r7, #24]
	lsrs	r2, r3, #31
	add	r3, r3, r2
	asrs	r3, r3, #1
	mov	r2, r3
	ldr	r3, [r7, #28]
	cmp	r3, r2
	blt	.L7i
	nop
	nop
	adds	r7, r7, #36
	mov	sp, r7
	@ sp needed
	pop	{r7}
	bx	lr
    
main:
	push	{r7, lr}
	sub	sp, sp, #44
	add	r7, sp, #0
	
	@Argumentos de la funcion leer
	ldr r0, =message	@Base buffer direccion in
	mov r1, #20			@tamaño del buffer
	@Argumentos de la funcion leer
	bl leer
	str r0, [r7]
	@Argumentos de la funcion leer
	ldr r0, =message	
	mov r1, #20	
	bl leer
	str r0, [r7,#4]
	@Argumentos de la funcion leer
	ldr r0, =message	
	mov r1, #20	
	bl leer
	str r0, [r7,#8]
	@Argumentos de la funcion leer
	ldr r0, =message	
	mov r1, #20	
	bl leer
	str r0, [r7,#12]
	@Argumentos de la funcion leer
	ldr r0, =message	
	mov r1, #20	
	bl leer
	str r0, [r7,#16]
	
	movs r0, #0		@i = 0
	
LOOP1:
	cmp r3, #5		@i<5
	bge ENDLOOP1
	
	@Argumentos de la funcion leer
	ldr r0, =message	@Base buffer direccion in
	mov r1, #20			@tamaño del buffer
	ldr r2, [r7, r3, lsl #2]
	@Argumentos de la funcion leer
	bl leer
	str r0, [r7, #24]
	
	ldr r0, =message	@Base buffer direccion in
	ldr r1, [r7, #24]   @argumento rc
	bl Ascii_Entero
	str r0, [r7, #28]
	
	ldr r0, [r7, #28]   @value
	str r0, [r7, r3, lsl #2]    @a[i]=value
	
	add r2, r2, #1       @i++
	
ENDLOOP1:
	
	mov r0, #5
	ldr r1, [r7]
	
	bl suma_arreglo
	str r0, [r7, #20]
	
	mov r0, #20
	ldr r1, =out
	ldr r2, [r7, #20]
	
	bl int_to_ascii
	str r0, [r7,#24]
	
	@Argumentos de la funcion imprimir	
	@ldr r0, =out		@Base buffer direccion out
	ldr r0, [r7,#24]    @rc
	mov r1, #20			@tamaño del buffer

	bl imprimir
	
	mov	r3, r0
	mov		r0, r3
	adds	r7, r7, #44
	mov	sp, r7
	@ sp needed
	pop	{r7, pc}
	bx	lr
	.size	main, .-main
	.ident	"GCC: (Arm GNU Toolchain 12.2 (Build arm-12.24)) 12.2.1 20221205"
