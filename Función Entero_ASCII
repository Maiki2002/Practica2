.cpu cortex-m3
	.arch armv7-m
	.fpu softvfp
	.eabi_attribute 20, 1
	.eabi_attribute 21, 1
	.eabi_attribute 23, 3
	.eabi_attribute 24, 1
	.eabi_attribute 25, 1
	.eabi_attribute 26, 1
	.eabi_attribute 30, 6
	.eabi_attribute 34, 1
	.eabi_attribute 18, 4
	.file	"main.c"
    .data
    message:
        .space 20 @Reserva espacio en la seccion de datos globales. 20 bytes
	out:
		.space 20
  string:
    .space 20
	.text
	.align	1
	.global	main
	.syntax unified
	.thumb
	.thumb_func
	.type	main, %function
  
Entero_ASCII:
              @ Prólogo
              push{r7}
              mov r5,r1 @ Realizo una copia
              sub sp,sp,#12
              adds r7,sp,#0
              @ Guardo los argumentos r0 y r1 a la memoria (pila).
              str r0,[r7]
              str r1,[r7,#4]
              
              @ Now, the function body
              
              ldr r2,[r7] @ r2 <- r0 Número a convertir.
              ldr r3,[r7,#4] @ r3 <- r1 String
              
              ldr r1,r5 @ string original. Entretanto, r5 es un registro vacío por ahora.
              mov r6,#10 @ divisor.
              
              for1:
                    cmp r2,#0
                    beq Done  @ (n != 0) this is equal to (n == 0)
                      udiv r5,r2,r6 @ (r5 = n/10)
                      mls r4,r6,r5,r2 @ (r4 = r2 - 10*r5)
                      add r4,r4,#0x30 @ (n % 10 + '0')
                      strb r4,[r3],#1 @ (*character = n % 10 + '0') e incrementa a uno.
                      udiv r2,r2,r6 @ (n/=10)
                      b for1 @ Repetirá hasta llegar a falso.
                      
                 Done:
                        mov r4,#0
                        strb r4,[r3] @ (*character = '/0')
                        sub r3,r3,#1 @ (p-- <- In means... Omite null).
                        
                        @ Damos la forma inversa.
                        for2:
                              cmp r3,r1
                              ble Exit @ (character <= string).
                                @ swap -> Intercambia
                                ldrb r4,[r3] @ aux_r4 = *character
                                ldrb r5,[r1] @ aux_r5 = *string
                                strb r4,[r1] @ *string = aux_r4
                                strb r5,[r3] @ *character = aux_r5
                                add r1,r1,#1 @ (string++)
                                sub r3,r3,#1 (character--)
                                b for2
                         Exit:
                                @ Epílogo
                                ldr r6,r3
                                mov r0,r6 @ Retornamos el valor.
                                adds r7,r7,#12
                                
                                mov sp,r7
                                pop {r7}
                                bx lr @ Finally we return.
                      
                      
              

imprimir:
	@prologo
	push {r7}
	sub sp, sp, #12	@¿Como se cuanto tengo que reservar?
	add r7, sp, #0

	@Argumentos de la funcion que provienen de main (r0, r1)
	str r0, [r7] 		@Direccion base del buffer
	str r1, [r7, #4] 	@Tamaño del buffer

	@imprimir en consola
	ldr r0, =1			@indica que se imprimira en la salida estandar
	ldr r1, [r7]		@Direccion base del buffer
    ldr r2, [r7, #4]	@Tamaño del buferr
	mov r7, #4			@"Write"
    svc 0x0
	mov r3, r0			@Por convencion se respalda en r3, lo que tiene r0
	add r7, sp, #0

	@epilogo
	mov r0, r3
	adds r7, r7, #12
	mov sp, r7
	pop {r7}
	bx lr

leer:
	@prologo
	push {r7}
	sub sp, sp, #8		@¿Como se cuanto tengo que reservar?  8 por el respaldo de r0 y r1
	add r7, sp, #0

	@Argumentos de la funcion que provienen de main (r0, r1)
	str r0, [r7] 		@Direccion base del buffer
	str r1, [r7, #4] 	@Tamaño del buffer

	ldr r0, =0			@Indica que se leerá desde la entrada estándar.
	ldr r1, [r7]		@Asignación de la dirección del buffer.
	ldr r2, [r7, #4]	@Asignación del tamaño del buffer
	mov r7, #3			@Indica la salida estadar "read"
	svc #0				@El valor de retorno se guarda en r0
	mov r3, r0			@Por convencion se respalda en r3, lo que tiene r0
	add r7, sp, #0

	@epilogo
	mov r0, r3
	adds r7, r7, #8
	mov sp, r7
	pop {r7}
	bx lr
    
main:
	push	{r7, lr}
	sub	sp, sp, #8
	add	r7, sp, #0
	movs	r2, #0 		@num = 0
	
	@Argumentos de la funcion leer
	ldr r0, =message	@Base buffer direccion in
	mov r1, #20			@tamaño del buffer

	bl leer

	@Argumentos de la funcion imprimir	
	ldr r0, =out		@Base buffer direccion out
	mov r1, #20			@tamaño del buffer

	bl imprimir
	
	mov	r3, r0
	mov		r0, r3
	adds	r7, r7, #8
	mov	sp, r7
	@ sp needed
	pop	{r7, pc}
	bx	lr
	.size	main, .-main
	.ident	"GCC: (Arm GNU Toolchain 12.2 (Build arm-12.24)) 12.2.1 20221205"
