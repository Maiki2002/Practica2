.cpu cortex-m3
	.arch armv7-m
	.fpu softvfp
	.eabi_attribute 20, 1
	.eabi_attribute 21, 1
	.eabi_attribute 23, 3
	.eabi_attribute 24, 1
	.eabi_attribute 25, 1
	.eabi_attribute 26, 1
	.eabi_attribute 30, 6
	.eabi_attribute 34, 1
	.eabi_attribute 18, 4
	.file	"main.c"
    .data
    message:
        .space 20
	.text
	.align	1
	.global	main
	.syntax unified
	.thumb
	.thumb_func
	.type	main, %function

leer:
	@prologo
	push {r7,lr}
	sub sp, sp, #20
	add r7, sp, #0

	ldr r0, =0 @Indica que se leerá desde la entrada estándar.
	ldr r1, =message
	ldr r2, =20
	mov r7, #3
	svc #0
	
	/*Ya esto lo hizo yo. Stephen.*/
	mov r0, =r1 @ Dirección (pseudo) que almacena [1er argumento].
	movs r2, #0 @ 2do argumento: el que valua.
	bl ASCII_entero
	
	mov r0,r3
	bl imprimir

	@exit
	mov r0, #0
	mov r7, #1
	svc #0

	

	@epilogo
	adds r7, r7, #4
	mov sp, r7
	pop {r7}
	bx lr


imprimir:
	@prologo
	push {r7}
	sub sp, sp, #4
	add r7, sp, #0
	
	/*Lo mío:*/
	str r0, [r7,#4]
	ldr r3,[r7,#4]
	
	@imprimo a la consola
    ldr r0, =1
    ldr r1, =r3
    mov r2, #12
    mov r7, #4
    svc 0x0 
/*
	@imprimir en consola
    ldr r0, =1 @Se utiliza para la salida estándar
    ldr r1, =message
    mov r2, #12
    mov r7, #4
    svc 0x0  */

	@exit
	mov r0, #0
	mov r7, #1
	svc #0

	@epilogo
	adds r7, r7, #4
	mov sp, r7
	pop {r7}
	bx lr
	
ASCII_entero:
		@Prólogo
		push {r6-r7}
		@sub sp,sp,#4
		@adds r7,sp,#0
		ldr r7,=r0 @la dirección de la memoria (el ASCII)
		mov r6, r2 @ (valua = 0 -> r6)
		loop:
			ldrb r0,[r7],#1 @r0 será el apuntador de la dirección y esto incrementa a 1 -> r0 = r0 +1 (Pues es un byte "carácteres").
			cbz r0, look @ CBZ no cambia indicadores de condición, es decir, esto es semejante a cmp r0,#0 Luego beq etiqueta
			@ Por lo tanto si el registro r0 es igual al null
			cmp r0, #0x30 @ Letra 0 es ASCII 0x030
			blt look @ Dirigete a if < '0'
			cmp r0, #0x39 @ Letra 9 es ASCII 0x39
			bgt look @ Dirigite a if > '9'
			subs r0,r0, #0x30 @ Restamos (con actualización a los flags) con 48.
			mul r2,r6,#10 @ r2 = r6 * 10
			add r3,r0,r2 @ r3 = r0 + (r6 *10).
			b loop @ Repite si todavía hay letras a convertir.
			
			@Epílogo
			pop {r6-r7,pc}
			bx lr
    
main:
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 1, uses_anonymous_args = 0
	@ link register save eliminated.
	push	{r7, lr}
	sub	sp, sp, #16
	add	r7, sp, #0
	movs	r3, #0
	str	r3, [r7, #4]

	bl leer
	
	
	movs	r3, #0
	mov	r0, r3
	adds	r7, r7, #12
	mov	sp, r7
	@ sp needed
	pop	{r7}
	bx	lr
	.size	main, .-main
	.ident	"GCC: (Arm GNU Toolchain 12.2 (Build arm-12.24)) 12.2.1 20221205"
